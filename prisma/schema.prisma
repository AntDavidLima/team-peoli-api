// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Routine {
  id           Int       @id @default(autoincrement())
  name         String
  startDate    DateTime  @map("start_date") @db.Date
  endDate      DateTime? @map("end_date") @db.Date
  orientations Json?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  emphasis  MuscleGroup[]
  trainings Training[]

  @@map("routine")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  name               String
  password           String
  phone              String    @db.VarChar(11)
  profilePhotoUrl    String?   @map("profile_photo_url")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  isProfessor        Boolean   @default(false) @map("is_professor")
  isActive           Boolean   @default(true) @map("is_active")
  lastPasswordChange DateTime? @map("last_password_change")
  lastLogin          DateTime? @map("last_login")
  activeWorkout      ActiveWorkout?

  workouts Workout[]
  Routine  Routine[]
  pushSubscriptions PushSubscription[]
  ScheduledNotifications ScheduledNotification[]

  @@map("user")
}

model Exercise {
  id                Int      @id @default(autoincrement())
  name              String
  executionVideoUrl String?  @map("execution_video_url")
  thumbnailUrl      String?  @map("thumbnail_url")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  instructions      Json?
  restTime          Int?     @map("rest_time")

  muscleGroups ExercisedMuscleGroup[]
  trainings    TrainingExercise[]
  workouts     WorkoutExercise[]

  @@map("exercise")
}

model MuscleGroup {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercises ExercisedMuscleGroup[]

  emphasizedBy Routine[]

  @@map("muscle_group")
}

model ExercisedMuscleGroup {
  weight    Decimal  @db.Decimal(3, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int      @map("exercise_id")

  muscleGroup   MuscleGroup @relation(fields: [muscleGroupId], references: [id], onDelete: Cascade)
  muscleGroupId Int         @map("muscle_group_id")

  @@id([exerciseId, muscleGroupId])
  @@map("exercised_muscle_group")
}

model Training {
  id        Int      @id @default(autoincrement())
  name      String?
  day       Day
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercises TrainingExercise[]
  workouts  Workout[]
  routines  Routine[]

  @@map("training")
}

model TrainingExercise {
  sets         Int      @db.SmallInt
  reps         String
  orientations Json?
  restTime     Int?     @map("rest_time")
  order        Int?
  userNote     String?   @map("user_note")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int      @map("exercise_id")

  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId Int      @map("training_id")

  @@id([exerciseId, trainingId])
  @@map("training_exercise")
}

model Workout {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  feedback  String?
  intensity Intensity?
  startTime DateTime   @map("start_time")
  endTime   DateTime?  @map("end_time")

  trainings Training[]

  exercises WorkoutExercise[]

  student   User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int  @map("student_id")

  @@map("workout")
}

model WorkoutExercise {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int      @map("exercise_id")

  workout   Workout? @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId Int      @map("workout_id")

  WorkoutExerciseSets WorkoutExerciseSets[]

  @@unique([workoutId, exerciseId])
  @@map("workout_exercise")
}

model WorkoutExerciseSets {
  id        Int      @id @default(autoincrement())
  reps      Int      @db.SmallInt
  load      Decimal  @db.Decimal(5, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  workoutExercise   WorkoutExercise @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade)
  workoutExerciseId Int             @map("workout_exercise_id")

  @@map("workout_exercise_sets")
}

model PushSubscription {
  id           Int      @id @default(autoincrement())
  endpoint     String   @unique
  p256dh       String
  auth         String
  userId       Int      @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscription")
}

model ScheduledNotification {
  id        Int                @id @default(autoincrement())
  payload   Json
  sendAt    DateTime           @map("send_at")
  status    NotificationStatus @default(PENDING)
  type      NotificationType   @default(REST)
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")

  @@index([status, sendAt])
  @@map("scheduled_notification")
}

model ActiveWorkout {
  id                Int      @id @default(autoincrement())
  day               Day
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int      @unique @map("user_id")
  workoutId         Int      @map("workout_id")
  trainingId        Int      @map("training_id")
  initialExerciseId Int      @map("initial_exercise_id")

  @@map("active_workout")
}

enum NotificationType {
  REST
  FINISH_REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  CANCELLED
  ERROR
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY

  @@map("day")
}

enum Intensity {
  LIGHT
  MODERATE
  VIGOROUS

  @@map("intensity")
}
